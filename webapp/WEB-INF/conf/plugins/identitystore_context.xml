<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

    <!-- DAO -->
    <bean id="identitystore.indexActionDAO" class="fr.paris.lutece.plugins.identitystore.service.indexer.elastic.index.business.IndexActionDao" />
    <bean id="identitystore.identityDAO" class="fr.paris.lutece.plugins.identitystore.business.identity.IdentityDAO" />
    <bean id="identitystore.attributeKeyDAO" class="fr.paris.lutece.plugins.identitystore.business.attribute.AttributeKeyDAO" />
    <bean id="identitystore.identityAttributeDAO" class="fr.paris.lutece.plugins.identitystore.business.identity.IdentityAttributeDAO" />
    <bean id="identitystore.attributeCertificateDAO" class="fr.paris.lutece.plugins.identitystore.business.attribute.AttributeCertificateDAO" />
    <bean id="identitystore.attributeRightDAO" class="fr.paris.lutece.plugins.identitystore.business.contract.AttributeRightDAO" />
    <bean id="identitystore.clientApplicationDAO" class="fr.paris.lutece.plugins.identitystore.business.application.ClientApplicationDAO" />
    <bean id="identitystore.serviceContractDAO" class="fr.paris.lutece.plugins.identitystore.business.contract.ServiceContractDAO" />
    <bean id="identitystore.attributeRequirementDAO" class="fr.paris.lutece.plugins.identitystore.business.contract.AttributeRequirementDAO" />
    <bean id="identitystore.attributeCertificationDAO" class="fr.paris.lutece.plugins.identitystore.business.contract.AttributeCertificationDAO" />
    <bean id="identitystore.refCertificationLevelDAO" class="fr.paris.lutece.plugins.identitystore.business.referentiel.RefCertificationLevelDAO" />
    <bean id="identitystore.refAttributeCertificationLevelDAO" class="fr.paris.lutece.plugins.identitystore.business.referentiel.RefAttributeCertificationLevelDAO" />
    <bean id="identitystore.refAttributeCertificationProcessusDAO" class="fr.paris.lutece.plugins.identitystore.business.referentiel.RefAttributeCertificationProcessusDAO" />
    <bean id="identitystore.identityObjectDAO" class="fr.paris.lutece.plugins.identitystore.service.indexer.elastic.index.business.IdentityObjectDAO" />
    <bean id="identitystore.duplicateRuleDao" class="fr.paris.lutece.plugins.identitystore.business.rules.duplicate.DuplicateRuleDAO" />
    <bean id="identitystore.identitySearchRuleDao" class="fr.paris.lutece.plugins.identitystore.business.rules.search.IdentitySearchRuleDAO" />
    <bean id="identitystore-quality.suspiciousIdentityDAO" class="fr.paris.lutece.plugins.identitystore.business.duplicates.suspicions.SuspiciousIdentityDAO" />

    <!-- Cache -->
    <bean id="identitystore.duplicateRulesCache"  class="fr.paris.lutece.plugins.identitystore.cache.DuplicateRulesCache"/>
    <bean id="identitystore.activeServiceContractCache"  class="fr.paris.lutece.plugins.identitystore.cache.ActiveServiceContractCache"/>
    <bean id="identitystore.qualityBaseCache"  class="fr.paris.lutece.plugins.identitystore.cache.QualityBaseCache"/>
    <bean id="identitystore.identityAttributeCache"  class="fr.paris.lutece.plugins.identitystore.cache.IdentityAttributeCache"/>
    <bean id="identitystore.identityAttributeValidationCache"  class="fr.paris.lutece.plugins.identitystore.cache.IdentityAttributeValidationCache"/>
    <bean id="identitystore.refAttributeCertificationDefinitionCache"  class="fr.paris.lutece.plugins.identitystore.cache.RefAttributeCertificationDefinitionCache"/>
	<bean id="identitystore.demandTypeCacheService" class="fr.paris.lutece.plugins.identitystore.cache.DemandTypeCacheService" />
    <bean id="identitystore.identityDtoCache" class="fr.paris.lutece.plugins.identitystore.cache.IdentityDtoCache"/>

    <!-- Services -->
    <!-- Services E/S clients -->
    <bean id="identitystore.elasticsearch.identityIndexer" class="fr.paris.lutece.plugins.identitystore.service.indexer.elastic.index.service.IdentityIndexer" >
        <constructor-arg name="strServerUrl" value="${elasticsearch.url}"/>
        <constructor-arg name="strLogin" value="${elasticsearch.user}"/>
        <constructor-arg name="strPassword" value="${elasticsearch.pwd}"/>
    </bean>
    <bean id="identitystore.elasticsearch.identitySearcher" class="fr.paris.lutece.plugins.identitystore.service.indexer.elastic.search.service.IdentitySearcher" >
        <constructor-arg name="strServerUrl" value="${elasticsearch.url}"/>
        <constructor-arg name="strLogin" value="${elasticsearch.user}"/>
        <constructor-arg name="strPassword" value="${elasticsearch.pwd}"/>
    </bean>

    <!-- Services recherche -->
    <bean id="identitystore.searchIdentityService.elasticsearch" class="fr.paris.lutece.plugins.identitystore.service.indexer.search.ElasticSearchIdentityService">
        <constructor-arg name="_identitySearcher" ref="identitystore.elasticsearch.identitySearcher"/>
    </bean>
    <bean id="identitystore.searchIdentityService.database" class="fr.paris.lutece.plugins.identitystore.service.search.DatabaseSearchIdentityService">
    </bean>

    <!-- Services moteurs doublons -->
    <bean id="identitystore.duplicateService.database" class="fr.paris.lutece.plugins.identitystore.service.duplicate.DuplicateService" >
        <constructor-arg name="_searchIdentityService" ref="identitystore.searchIdentityService.database"/>
    </bean>
    <bean id="identitystore.duplicateService.elasticsearch" class="fr.paris.lutece.plugins.identitystore.service.duplicate.DuplicateService" >
        <constructor-arg name="_searchIdentityService" ref="identitystore.searchIdentityService.elasticsearch"/>
    </bean>

	<!-- Notification Store impl  -->
	<bean id="notificationStore.impl" class="fr.paris.lutece.plugins.notificationstore.v1.web.rs.service.NotificationStoreMock">
	</bean>	
	<!-- Notification Store Service  -->
	<bean id="notificationStore.notificationStoreService" class="fr.paris.lutece.plugins.notificationstore.v1.web.service.NotificationStoreService">
	    <constructor-arg ref="notificationStore.impl"/>
	</bean>
	
    <!-- Logging -->
    <bean id="identitystore.listener.logging" class="fr.paris.lutece.plugins.identitystore.service.listeners.LoggingListener" />
    <bean id="identitystore.listener.attributeHistory" class="fr.paris.lutece.plugins.identitystore.service.listeners.AttributeHistoryListener" />
    <bean id="identitystore.listener.identityHistory" class="fr.paris.lutece.plugins.identitystore.service.listeners.IdentityHistoryListener" />
    <bean id="identitystore.listener.index" class="fr.paris.lutece.plugins.identitystore.service.indexer.elastic.index.listener.IdentityIndexListener" >
        <constructor-arg ref="identitystore.elasticsearch.identityIndexer" name="_identityIndexer"/>
    </bean>

    <!-- External providers-->
    <bean id="identitystore.identityInfoExternalProvider" class="fr.paris.lutece.plugins.identitystore.service.external.MockIdentityInfoExternalProvider" />

    <!-- Config -->
    <bean id="identitystore.application.code.delete.authorized.list" class="java.util.ArrayList">
        <constructor-arg>
            <list>
                <value></value>
            </list>
        </constructor-arg>
    </bean>

    <!-- REST -->
    <bean id="identitystore.customObjectMapper"  class="fr.paris.lutece.plugins.identitystore.v3.web.rs.CustomMapper" />
    <bean id="identitystore.uncaughtExceptionMapper"  class="fr.paris.lutece.plugins.identitystore.v3.web.rs.error.UncaughtExceptionMapper" />
    <bean id="identitystore.uncaughtIdentityNotFoundExceptionMapper"  class="fr.paris.lutece.plugins.identitystore.v3.web.rs.error.UncaughtIdentityNotFoundExceptionMapper" />
    <bean id="identitystore.uncaughtServiceContractNotFoundExceptionMapper"  class="fr.paris.lutece.plugins.identitystore.v3.web.rs.error.UncaughtServiceContractNotFoundExceptionMapper" />
    <bean id="identitystore.uncaughtIdentityStoreExceptionMapper"  class="fr.paris.lutece.plugins.identitystore.v3.web.rs.error.UncaughtIdentityStoreExceptionMapper" />

    <bean id="identitystore.v1.identityStoreRestService"  class="fr.paris.lutece.plugins.identitystore.v1.web.rs.IdentityStoreRestService" />
    <bean id="identitystore.v2.identityStoreRestService"  class="fr.paris.lutece.plugins.identitystore.v2.web.rs.IdentityStoreRestService" />
    <bean id="identitystore.v3.identityStoreRestService"  class="fr.paris.lutece.plugins.identitystore.v3.web.rs.IdentityStoreRestService" />
    <bean id="identitystore.swaggerRest"  class="fr.paris.lutece.plugins.identitystore.v2.web.rs.swagger.SwaggerRest" />
    <bean id="identitystore.serviceContractRest" class="fr.paris.lutece.plugins.identitystore.v3.web.rs.ServiceContractRestService" />
    <bean id="identitystore.clientRest" class="fr.paris.lutece.plugins.identitystore.v3.web.rs.ClientRestService" />
    <bean id="identitystore.referentielRest" class="fr.paris.lutece.plugins.identitystore.v3.web.rs.ReferentielRestService" />
    <bean id="identitystore.historyRest" class="fr.paris.lutece.plugins.identitystore.v3.web.rs.HistoryRestService" />

    <!-- Schedule full E/S identities reindexing -->
    <bean id="identitystore.fullIndexer" class="fr.paris.lutece.plugins.identitystore.service.indexer.elastic.index.task.FullIndexTask" >
        <constructor-arg name="_identityIndexer" ref="identitystore.elasticsearch.identityIndexer"/>
    </bean>
    <task:scheduler id="identitystore.fullIndexerScheduler" pool-size="10" />
    <task:scheduled-tasks scheduler="identitystore.fullIndexerScheduler">
        <task:scheduled ref="identitystore.fullIndexer" method="run" cron="${identitystore.index.full.cron}"/>
    </task:scheduled-tasks>

</beans>
