<?xml version="1.0" encoding="UTF-8"?>
<document>
    <properties>
        <title>Plugin Identity Store</title>
    </properties>
    <body>
        <section name="Plugin Identity Store">
            <p>
                <img src="images/identitystore.png" />
            </p>
            <subsection name="Introduction">
                <p>
                    Ce plugin permet de constituer un référentiel d'identités. Couplé à un système d'authentification, il offre un service de <b>Fournisseur d'Identités (FI)</b>.
                </p>
                <p> 
                    Une identité est composée d'attributs. L'accès aux attributs se fait via une API REST. Chaque attribut peut être lu, écrit ou certifié par une application cliente de l'API si elle dispose des autorisations adéquates.
                </p>
                <p> 
                    Les applications clientes sont aussi dénommées <b>Fournisseurs de Service (FS)</b>.
                </p>
                <p>
                    Ce plugin offre une interface web pour permettre aux administrateurs de configurer le référentiel d'identités et les autorisations des fournisseurs de services.
                </p>
            </subsection>
            <subsection name="API REST">
                <p>
                   Le plugin fournit une API REST permettant de gérer les identités. Plusieurs versions de l'API peuvent être appelées :
                   <ul>
                        <li>Version 2 : the URL to use is <code>/identity/rest/identitystore/v2/identity</code>. Cette version utilise les objets des packages <code>fr.paris.lutece.plugins.identitystore.v1.*</code> de la <code>library-identitybusiness</code>.</li>
                        <li>Version 3 : the URL to use is <code>/identity/rest/identitystore/v3/identity</code>. Cette version utilise les objets des packages <code>fr.paris.lutece.plugins.identitystore.v2.*</code> de la <code>library-identitybusiness</code>.</li>
                   </ul>
                </p>
                <p>
                    La Version 2 ne peut être utilisée que pour récupérer une identité à partir de son CUID ou GUID. Seulement la version 3 offre une utilisation complète de l'API (CRUD et recherche).
                </p>
            </subsection>
            <subsection name="Environment">
                <p>
                    L'exécution de l'IDS nécessite une instance d'[Elasticsearch (8+)](https://www.elastic.co/fr/downloads/elasticsearch). Aucune configuration particulière nécessaire, télécharger et exécuter.
                </p>
                <p>
                    L'IDS utilise [PostgreSQL 10+](https://www.postgresql.org/) comme database relationnelle pour stocker ses données.
                </p>
            </subsection>
            <subsection name="Configuration">
                <p>
                    Un configuration particulière peut-être trouvée dans le ficher <code>identitystore_context.xml file</code>. Il s'agit de l'utilisation d'une (https://docs.spring.io/spring-framework/docs/3.2.0.M1/reference/html/scheduling.html)[spring task] pour schéduler le job de ré-indexation full des identités dans Elasticsearch avec un CRON (ne peut pas être fait pour le moment avec un Daemon Lutèce).
                    <div class="source">
                        <pre>
    &lt;!-- Schedule full E/S identities reindexing --&gt;
    &lt;bean id="identitystore.fullIndexer" class="fr.paris.lutece.plugins.identitystore.service.indexer.elastic.index.task.FullIndexTask" &gt;&lt;/bean&gt;
    &lt;task:scheduler id="identitystore.fullIndexerScheduler" /&gt;
    &lt;task:scheduled-tasks scheduler="identitystore.fullIndexerScheduler"&gt;
    &lt;task:scheduled ref="identitystore.fullIndexer" method="run" cron="${identitystore.index.full.cron}"/&gt;
    &lt;/task:scheduled-tasks&gt;
                        </pre>
                        Avec
                        <ul>
                            <li><code>identitystore.fullIndexer</code> le bean réalisant la ré-indéxation des identités</li>
                            <li><code>identitystore.fullIndexerSchedulerr</code> le spring scheduler qui cadence le job <code>identitystore.fullIndexer</code></li>
                            <li><code>method="run"</code> le nom de la méthode du bean <code>identitystore.fullIndexer</code> qui sera appelée par le scheduler</li>
                            <li><code>identitystore.index.full.cron</code> définit l'expression CRON et doit être présente dans le fichier <code>identitystore.properties</code></li>
                        </ul>
                    </div>
                </p>
            </subsection>
            <subsection name="Usage">
                <p>
                    Le plugin expose des méthodes web pour gérer les identités. Consulter la page <em>/jsp/site/Portal.jsp?page=swaggerui</em> pour plus d'informations à propos de ces méthodes (à venir..).
                </p>
            </subsection>
        </section>
    </body>
</document>

